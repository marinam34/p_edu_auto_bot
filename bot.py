from telegram import (
    Update, ReplyKeyboardMarkup, ReplyKeyboardRemove,
    InlineKeyboardMarkup, InlineKeyboardButton
)
from telegram.ext import (
    ApplicationBuilder, ContextTypes,
    CommandHandler, MessageHandler, CallbackQueryHandler, filters
)
from config import TELEGRAM_TOKEN
from qa_engine import get_answer, add_support_entry
import os


user_roles: dict[int, str] = {}
waiting_for_support: dict[int, bool] = {}
support_messages: dict[int, tuple] = {}

SUPPORT_CHAT_ID   = -1002633010449

BTN_CHANGE_ROLE  = "üîÑ –°–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å"
BTN_CALL_SUPPORT = "üë®‚Äçüíª –í—ã–∑–≤–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞"
BTN_RESTART      = "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"

def main_keyboard():
    return ReplyKeyboardMarkup(
        [[BTN_CHANGE_ROLE], [BTN_CALL_SUPPORT], [BTN_RESTART]],
        resize_keyboard=True
    )

def role_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–£—á–∞—Å—Ç–Ω–∏–∫",      callback_data="role_participant")],
        [InlineKeyboardButton("–ü—Ä–æ–∫—Ç–æ—Ä",       callback_data="role_proctor")],
        [InlineKeyboardButton("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", callback_data="role_admin")],
        [InlineKeyboardButton("–ú–µ–Ω–µ–¥–∂–µ—Ä",      callback_data="role_manager")],
        [InlineKeyboardButton("–î—Ä—É–≥–æ–µ",        callback_data="role_other")],
    ])


async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    user_roles.pop(uid, None)
    waiting_for_support.pop(uid, None)

    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç ProctorEdu.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:",
        reply_markup=ReplyKeyboardRemove()
    )
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å:", reply_markup=role_keyboard())

async def cmd_change_role(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Ä–æ–ª—å:", reply_markup=role_keyboard())

async def handle_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid  = update.effective_user.id
    text = update.message.text

    if text == BTN_RESTART:
        return await cmd_start(update, context)
    if text == BTN_CHANGE_ROLE:
        return await cmd_change_role(update, context)
    if text == BTN_CALL_SUPPORT:
        waiting_for_support[uid] = True
        await update.message.reply_text("–ù–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å, —è –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É.")
        return

    if uid not in user_roles:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å:", reply_markup=role_keyboard())
        return

    if waiting_for_support.get(uid):
        role = user_roles.get(uid, "–î—Ä—É–≥–æ–µ")
        sent = await context.bot.send_message(
            chat_id=SUPPORT_CHAT_ID,
            text=f"–ó–∞–ø—Ä–æ—Å –æ—Ç {update.effective_user.first_name} (ID {uid}, —Ä–æ–ª—å {role}):\n\n{text}"
        )
        support_messages[sent.message_id] = (uid, text)
        await update.message.reply_text("–í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ üôå")
        return

    thinking = await update.message.reply_text("–î—É–º–∞—é... ü§î")
    role = user_roles.get(uid, "–î—Ä—É–≥–æ–µ")
    answer = get_answer(text, role)
    await thinking.delete()

    kb = InlineKeyboardMarkup([[InlineKeyboardButton("–í—ã–∑–≤–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞", callback_data="call_support")]])
    await update.message.reply_text(answer, reply_markup=kb)

async def callback_role_or_support(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    uid, data = update.effective_user.id, query.data

    if data.startswith("role_"):
        mapping = {
            "role_participant": "–£—á–∞—Å—Ç–Ω–∏–∫",
            "role_proctor":     "–ü—Ä–æ–∫—Ç–æ—Ä",
            "role_admin":       "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
            "role_manager":     "–ú–µ–Ω–µ–¥–∂–µ—Ä",
            "role_other":       "–î—Ä—É–≥–æ–µ",
        }
        user_roles[uid] = mapping.get(data, "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        await query.message.reply_text(
            f"–†–æ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {user_roles[uid]}\n–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å.",
            reply_markup=main_keyboard()
        )
        return

    if data == "call_support":
        waiting_for_support[uid] = True
        await query.message.reply_text("–û–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞:")

async def cmd_reply_support(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) < 2:
        return await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /reply <ID> <—Ç–µ–∫—Å—Ç>")
    try:
        tgt_uid = int(context.args[0])
        answer  = " ".join(context.args[1:])
        await context.bot.send_message(tgt_uid, f"üßë‚Äçüíª –û—Ç–≤–µ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞:\n\n{answer}")
        waiting_for_support.pop(tgt_uid, None)
        await update.message.reply_text("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")

async def handle_support_chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if str(update.effective_chat.id) != str(SUPPORT_CHAT_ID):
        return
    if not update.message.reply_to_message:
        return
    src_msg_id = update.message.reply_to_message.message_id
    if src_msg_id not in support_messages:
        return

    tgt_uid, question_text = support_messages[src_msg_id]
    answer_text = update.message.text

    try:
        await context.bot.send_message(tgt_uid, f"üßë‚Äçüíª –û—Ç–≤–µ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞:\n\n{answer_text}")
        add_support_entry(question_text, answer_text)
        waiting_for_support.pop(tgt_uid, None)
        await update.message.reply_text("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å–ª–∞—Ç—å –æ—Ç–≤–µ—Ç: {e}")

async def cmd_chatid(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(f"ID —ç—Ç–æ–≥–æ —á–∞—Ç–∞: {update.effective_chat.id}")


app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

app.add_handler(CommandHandler("start",  cmd_start))
app.add_handler(CommandHandler("role",   cmd_change_role))
app.add_handler(CommandHandler("chatid", cmd_chatid))
app.add_handler(CommandHandler("reply",  cmd_reply_support))

app.add_handler(CallbackQueryHandler(callback_role_or_support))
app.add_handler(
    MessageHandler(
        filters.TEXT & ~filters.COMMAND & filters.Chat(chat_id=SUPPORT_CHAT_ID),
        handle_support_chat
    )
)
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_question))

print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
app.run_polling()
